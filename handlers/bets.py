# -*- coding: utf-8 -*-
from aiogram.types import Message, CallbackQuery
from aiogram.dispatcher import FSMContext
from random import randint

from keyboards.inline.bets_transport_keyboard import transport_button
from sql.sql_commands import change_of_balance, getting_balance
from loader import dp
from states.states_for_bets import *


def input_check(func):
   async def check(message: Message, state: FSMContext):
      if len(message.text.split()) != 2:
         await message.answer('–¢—É—Ç —Ç–æ—á–Ω–æ 2 —á–∏—Å–ª–∞? –ü–æ–ø—Ä–æ–±—É–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ —Ä–∞–∑')
         return

      elif not message.text.split()[0].isdigit() or not message.text.split()[1].isdigit():
         await message.answer('–ù–µ—É–≤–µ—Ä–µ–Ω —á—Ç–æ —Ç—É—Ç –≤—Å–µ —á–∏—Å–ª–∞. –ü–æ–ø—Ä–æ–±—É–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ —Ä–∞–∑')
         return

      elif int(message.text.split()[0]) < 50:
         await message.answer('–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 50.')
         return

      elif int(message.text.split()[1]) < 2 or int(message.text.split()[1]) > 10:
         await message.answer('–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ 2 –∏ –Ω–µ –±–æ–ª—å—à–µ 10')
         return

      await func(message, state)
   return check

@dp.message_handler(commands=['bets'])
async def bets(message: Message):
   await message.answer('–ü—Ä–∞–≤–∏–ª–∞ –ø–æ –∫–æ–º–º–∞–Ω–¥–µ: /betting_rules\n–í–≤–µ–¥–∏—Ç–µ [—Å—Ç–∞–≤–∫—É] [–∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Ö–Ω–∏–∫–∏]\n–ü—Ä–∏–º–µ—Ä: 250 4')
   await S.amount_of_transport.set()


@dp.message_handler(commands=['betting_rules'], state=S.amount_of_transport)
async def betting_rules(message: Message):
   await message.answer('–°—Ç–∞–≤–∫–∞ - —ç—Ç–æ —Ç–∞ —Å—É–º–º–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã –ø–æ—Ç–µ—Ä—è–µ—Ç–µ –ø—Ä–∏ –ø–æ—Ä–∞–∂–µ–Ω–∏–∏ –∏–ª–∏ —É–º–Ω–æ–∂–∏—Ç–µ –ø—Ä–∏ –ø–æ–±–µ–¥–µ\n\n'
                        '–ö–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Ö–Ω–∏–∫–∏ - —ç—Ç–æ —Ç–æ —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥—ã (1/n) –∏ –Ω–∞ –∫–æ—Ç–æ—Ä–µ —É–º–Ω–æ–∂–∏—Ç—Å—è —Å—Ç–∞–≤–∫–∞\n\n'
                        '–í–≤–µ–¥–∏—Ç–µ [—Å—Ç–∞–≤–∫—É] [–∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Ö–Ω–∏–∫–∏]\n–ü—Ä–∏–º–µ—Ä: 250 4')


@dp.message_handler(content_types=['text'], state=S.amount_of_transport)
@input_check
async def start_bets(message: Message, state: FSMContext):
   mes = message.text.split()

   transport = list(set(['üöå –ê–≤—Ç–æ–±—É—Å', 'üöú –¢—Ä–∞–∫—Ç–æ—Ä', 'üöã –¢—Ä–∞–º–≤–∞–π', 'üöÜ –ü–æ–µ–∑–¥', 'üöó –ê–≤—Ç–æ–º–∞–±–∏–ª—å', 'üö§ –ö–∞—Ç–µ—Ä', 'üö≤ –í–µ–ª–æ—Å–∏–ø–µ–¥', 'üöö –ì—Ä—É–∑–æ–≤–∏–∫', 'üöÅ –í–µ—Ä—Ç–æ–ª–µ—Ç', 'üöÇ –ü–∞—Ä–æ–≤–æ–∑']))
   buttons_name = [transport[i] for i in range(int(mes[1]))]

   # Save data
   await state.update_data(bet=int(mes[0]), x=int(mes[1]))

   await message.answer(f'–°—Ç–∞–≤–∫–∞ - {mes[0]}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç',  reply_markup=transport_button(buttons_name=buttons_name))
   await S.getting_callback.set()


@dp.callback_query_handler(state=S.getting_callback)
async def handling_callback_win(call: CallbackQuery, state: FSMContext):
   await call.answer(cache_time=6)

   chat_id = call.from_user.id

   data = await state.get_data() # getting data
   bet = data.get('bet') # getting bet
   x = data.get('x') # getting x

   if 'win' in str(call.data):
      change_of_balance(chat_id=chat_id, sum=bet)
      await call.message.answer(text=f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Ç—ã –≤—ã–∏–≥—Ä–∞–ª - {bet * x}\n–ë–∞–ª–∞–Ω—Å - {getting_balance(chat_id)}')
   else:
      change_of_balance(chat_id=chat_id, sum=bet*-1)
      await call.message.answer(text=f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ç—ã –ø—Ä–æ–∏–≥—Ä–∞–ª - {bet}\n–ë–∞–ª–∞–Ω—Å - {getting_balance(chat_id)}')

   await call.message.answer('–í–≤–µ–¥–∏—Ç–µ [—Å—Ç–∞–≤–∫—É] [–∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Ö–Ω–∏–∫–∏]\n–ü—Ä–∏–º–µ—Ä: 250 4')
   await S.amount_of_transport.set()
